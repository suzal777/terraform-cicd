name: EC2 Terraform CI/CD

on:
  pull_request:
    branches: [ main ]
    paths: [ 'ec2-project/**' ]
  push:
    branches: [ main ]
    paths: [ 'ec2-project/**' ]

env:
  TF_VERSION: 1.12.2
  TFLINT_VERSION: v0.52.0
  AWS_REGION: us-east-1
  PROJECT: ec2

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ec2-project
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Run TFLint
        id: tflint
        run: tflint --init && tflint

      - name: Comment TFLint Results
        if: failure() && github.event_name == 'pull_request'
        uses: GetTerminus/terraform-pr-commenter@v1
        with:
          job: tflint
          id: tflint
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        id: validate
        run: terraform init -backend=false && terraform validate

  security-scan:
    name: Security Scan
    needs: lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ec2-project
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run TFSec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  plan:
    name: Plan
    needs: [lint, security-scan]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ec2-project
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}  

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          mkdir -p ./terraform_plans
          terraform plan -lock=false -input=false -no-color -out=./terraform_plans/tfplan.binary
          terraform show -no-color ./terraform_plans/tfplan.binary > ./terraform_plans/plan.txt
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      - name: Comment Plan Results
        if: github.event_name == 'pull_request'
        uses: GetTerminus/terraform-pr-commenter@v3
        with:
          commenter_type: plan
          commenter_input: ./terraform_plans/tfplan.txt
          commenter_plan_path: ./terraform_plans/plan.txt
          commenter_exitcode: ${{ steps.plan.outputs.exit_code }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_WORKSPACE: ${{ inputs.terraform_workspace }}  

  release:
    name: Create Release
    needs: plan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get EC2 Project Version
        id: version
        working-directory: ./ec2-project
        run: |
          latest_tag=$(git describe --tags --match "ec2-v*" --abbrev=0 2>/dev/null || echo "ec2-v0.0.0")
          version=${latest_tag#ec2-v}
          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          patch=$(echo $version | cut -d. -f3)
          new_patch=$((patch + 1))
          new_version="ec2-v${major}.${minor}.${new_patch}"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create Tag
        uses: mathieudutour/github-tag-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.version.outputs.new_version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: EC2 Project ${{ steps.version.outputs.new_version }}
          body: "EC2 Infrastructure Release"
          files: |
            ec2-project/*.tf
            ec2-project/.terraform.lock.hcl        
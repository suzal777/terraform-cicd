name: S3 Terraform CI/CD

on:
  pull_request:
    branches: [ main ]
    paths: [ 's3-project/**' ]
  push:
    branches: [ main ]
    paths: [ 's3-project/**' ]

permissions:
  contents: write    

env:
  TF_VERSION: 1.12.2
  TFLINT_VERSION: v0.52.0
  AWS_REGION: us-east-1
  PROJECT: s3

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./s3-project
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Run TFLint
        id: tflint
        run: tflint --init && tflint

      - name: Comment TFLint Results
        if: failure() && github.event_name == 'pull_request'
        uses: GetTerminus/terraform-pr-commenter@v3
        with:
          job: tflint
          id: tflint
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        id: validate
        run: terraform init -backend=false && terraform validate

  security-scan:
    name: Security Scan
    needs: lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./s3-project
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run TFSec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  plan:
    name: Plan
    needs: [lint, security-scan]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    defaults:
      run:
        working-directory: ./s3-project
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}  

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          mkdir -p ./terraform_plans
          terraform plan -lock=false -input=false -no-color -out=./terraform_plans/tfplan.binary
          terraform show -no-color ./terraform_plans/tfplan.binary > ./terraform_plans/plan.txt
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      - name: Comment Terraform Plan Output
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('./s3-project/terraform_plans/plan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output for \`ec2-instance\`\n\n\`\`\`hcl\n${planOutput}\n\`\`\``
            });

  release:
    name: Create Release
    needs: plan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.semver_s3.outputs.new_version }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate S3 Zip File
        working-directory: s3-project
        run: |
          zip -r s3-terraform-config.zip . -x "*.git*"
          mkdir -p releases
          mv s3-terraform-config.zip releases/    

      - name: Get Semantic Version
        id: semver_s3
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GH_PAT }}
          release_branches: "main"
          tag_prefix: "s3-v"
          create_annotated_tag: true
          dry_run: false
          default_bump: "patch"

      - name: Archive S3 Terraform Configuration
        run: zip -r s3-terraform-config.zip ./s3-project  

      - name: Create GitHub Release
        id: create_release_s3
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.semver_s3.outputs.new_tag }}
          release_name: "S3 Release ${{ steps.semver_s3.outputs.new_tag }}"
          draft: false
          prerelease: false    
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}  

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release_s3.outputs.upload_url }}
          asset_path: ./s3-terraform-config.zip
          asset_name: s3-terraform-config.zip
          asset_content_type: application/zip 
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}    

  deploy:
    name: Deploy S3
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  

      - name: Download EC2 Release Artifact
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: ${{ github.repository }}
          file: s3-terraform-config.zip
          target: s3-terraform-config.zip
          token: ${{ secrets.GH_PAT }}

      - name: Unzip Artifact
        run: unzip s3-terraform-config.zip -d s3-terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Get EC2 Remote State
        working-directory: ./s3-terraform
        run: |
          terraform init
          terraform plan

      - name: Terraform Apply
        working-directory: ./s3-terraform
        run: terraform apply -auto-approve -input=false         
        